#!/bin/bash

. $BASHRC_BASE/bashrc/errors.bash

function usage() {
  echo "Usage: brc-files-cdnpurgeobject [-h] [-a BRC_AUTHTOKEN] [-v BRC_VAULTNAME] \\"
  echo "                                [-r BRC_REGION] [-e EMAIL] \\"
  echo "                                -c CONTAINER -o OBJECT"
  echo "Example:"
  echo "  # brc-files-cdnpurgeobject -a 1a2b3c4d5e6f7g8h9i0j \\"
  echo "                             -v MossoCloudFS_199f2dd2-e293-11e3-87ea-6f46a026e216 \\"
  echo "                             -r dfw \\"
  echo "                             -c images \\"
  echo "                             -o banner.jpg \\"
  echo "                             -e first.last@domain.com"
  echo "Arguments:"
  echo "  -a X	Authentication token.  This can be set via the environment"
  echo "        variable BRC_AUTHTOKEN instead of as an argument."
  echo "  -c X  Name of Cloud Files container in which the object resides."
  echo "  -e X  Contact email to which notification will be sent upon completion."
  echo "  -h	Print this help"
  echo "  -o X  Name of Cloud Files object to purge from CDN cache."
  echo "  -r X  Region.  Examples: iad, dfw, ord, syd.  This can be set via"
  echo "        the environment variable BRC_REGION instead of as an"
  echo "        argument."
  echo "  -v X  Vault name for this account.  This can be set via the environment"
  echo "        variable BRC_VAULTNAME instead of as an argument."
}

USAGEFLAG=0
while getopts ":a:c:e:ho:v:" arg; do
  case $arg in
    a) BRC_AUTHTOKEN=$OPTARG;;
    c) CONTAINER=$OPTARG;;
    e) EMAIL=$OPTARG;;
    h) usage && exit 0;;
    o) OBJECT=$OPTARG;;
    v) BRC_VAULTNAME=$OPTARG;;
    :) echo "ERROR: Option -$OPTARG requires an argument."
       USAGEFLAG=1;;
    *) echo "ERROR: Invalid option: -$OPTARG"
       USAGEFLAG=1;;
  esac
done #End arguments
shift $(($OPTIND - 1))

for ARG in BRC_AUTHTOKEN BRC_REGION BRC_VAULTNAME; do
  if [ -z "${!ARG}" ]; then
    echo "ERROR: Must define $ARG in environment or argument"
    USAGEFLAG=1
  fi
done
for ARG in CONTAINER OBJECT; do
  if [ -z "${!ARG}" ]; then
    echo "ERROR: Must define $ARG as argument"
    USAGEFLAG=1
  fi
done
if [ $USAGEFLAG -ne 0 ]; then
  usage && exit 1
fi

#FILES_ENDPOINT=$( $BRCUTIL/brc-util-filesendpoint -r $BRC_REGION )
CDN_ENDPOINT=$( $BRCUTIL/brc-util-cdnendpoint -r $BRC_REGION )

echo curl --write-out \\n%{http_code} --silent --output - \
            $CDN_ENDPOINT/$BRC_VAULTNAME/$CONTAINER/$OBJECT \
            -X DELETE \
            -H "X-Auth-Token: $BRC_AUTHTOKEN" \
            -H "X-Purge-Email: $EMAIL" 
exit 0


#
# Purge the object
DATA=$(curl --write-out \\n%{http_code} --silent --output - \
            $CDN_ENDPOINT/$BRC_VAULTNAME/$CONTAINER/$OBJECT \
            -X DELETE \
            -H "X-Auth-Token: $BRC_AUTHTOKEN" \
            -H "X-Purge-Email: $EMAIL" \
         2>/dev/null )
RETVAL=$?
CODE=$( echo "$DATA" | tail -n 1 )

# Check for failed API call
if [ $RETVAL -ne 0 ]; then
  errorcurlfail
elif [[ $(echo "$CODE" | grep -cE '^2..$') -eq 0 ]]; then
  errornot200 $CODE $( echo "$DATA" | head -n -1 )
fi

DATA=$( echo "$DATA" | head -n -1 | $BRCUTIL/brc-util-json.tool )

echo "Code: $CODE"
echo "Data:"
echo "$DATA"



exit 0
