#!/bin/bash

#
# Authenticate with API key to get a token

function usage() {
  echo "Usage: brc-identity-getauthtoken [-u BRC_USERNAME] [-k BRC_API_KEY]"
  echo "Example:"
  echo "  # brc-identity-getauthtoken -u johndoe -k 1a2b3c4d5e6f7g8h9i0j"
  echo "Example:"
  echo "  # export BRC_USERNAME=johndoe"
  echo "  # export BRC_API_KEY=1a2b3c4d5e6f7g8h9i0j"
  echo "  # brc-identity-getauthtoken"
}

while getopts ":hu:k:" arg; do
  case $arg in
    u) BRC_USERNAME=$OPTARG;;
    k) BRC_API_KEY=$OPTARG;;
    *) usage && exit 1;;
  esac
done #End arguments
shift $(($OPTIND - 1))

if [ -z $BRC_USERNAME ]; then
  echo "ERROR: Must define BRC_USERNAME in environment or argument"
  usage && exit 1
elif [ -z $BRC_API_KEY ]; then
  echo "ERROR: Must define BRC_API_KEY in environment or argument"
  usage && exit 1
fi

#ENDPOINT=$IDENTITY_ENDPOINT
DATA=$(curl --write-out \\n%{http_code} --silent --output - \
            $IDENTITY_ENDPOINT/tokens \
            -H "Content-Type: application/json" \
            -d '{ "auth": { 
                  "RAX-KSKEY:apiKeyCredentials": {
                    "apiKey": "'$BRC_API_KEY'",
                    "username": "'$BRC_USERNAME'" } } }' \
         2>/dev/null )
CODE=$( echo "$DATA" | tail -n 1 )

# Check for failed API call
if [[ $(echo "$CODE" | grep -cE '^2..$') -eq 0 ]]; then
  echo "$DATA" | head -n -1
  echo
  echo "ERROR: API call unsuccessful"
  echo "Response code: $CODE"
  echo "Raw response data above."
  exit 1
fi

TOKENDATA=$( echo "$DATA" | head -n -1 | brc-json.tool )

AUTHTOKEN=$( echo "$TOKENDATA" \
              | sed -n 's/^bashrc~access~token~id~//p' )
TENANTID=$( echo "$TOKENDATA" \
              | sed -n 's/^bashrc~access~token~tenant~id~//p' )
EXPIRES=$( echo "$TOKENDATA" \
              | sed -n 's/^bashrc~access~token~expires~//p' )

echo "BRC_AUTHTOKEN=$AUTHTOKEN"
echo "BRC_TENANTID=$TENANTID"
echo "EXPIRES=$EXPIRES"
exit 0



