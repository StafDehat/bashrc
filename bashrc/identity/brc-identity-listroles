#!/bin/bash

#
# List available roles on the given cloud account
function usage() {
  echo "Usage: brc-identity-listroles [-a BRC_AUTHTOKEN] [-h]"
  echo "Example:"
  echo "  # brc-identity-listroles -a 1a2b3c4d5e6f7g8h9i0j"
  echo "Example:"
  echo "  # export BRC_AUTHTOKEN=1a2b3c4d5e6f7g8h9i0j"
  echo "  # brc-identity-listroles"
}

USAGEFLAG=0
while getopts ":ha:" arg; do
  case $arg in
    a) BRC_AUTHTOKEN=$OPTARG;;
    h) usage && exit 0;;
    :) echo "ERROR: Option -$OPTARG requires an argument."
       USAGEFLAG=1;;
    *) echo "ERROR: Invalid option: -$OPTARG"
       USAGEFLAG=1;;
  esac
done #End arguments
shift $(($OPTIND - 1))

if [ -z $BRC_AUTHTOKEN ]; then
  echo "ERROR: Must define BRC_AUTHTOKEN in environment or argument"
  USAGEFLAG=1
fi

if [ $USAGEFLAG -ne 0 ]; then
  usage && exit 1
fi

DATA=$(curl --write-out \\n%{http_code} --silent --output - \
            $IDENTITY_ENDPOINT/OS-KSADM/roles \
             -H "Content-Type: application/json" \
             -H "X-Auth-Token: $BRC_AUTHTOKEN" \
          2>/dev/null )
CODE=$( echo "$DATA" | tail -n 1 )

# Check for failed API call
# Check for failed API call
if [ $RETVAL -ne 0 ]; then
  echo "ERROR: Attempt to reach API (a curl command) failed."
  echo "Note: This relies on IDENTITY_ENDPOINT being defined."
  echo "See the README - this SDK modifies your environment -"
  echo "it shouldn't be run with full paths."
  exit 1
elif [[ $(echo "$CODE" | grep -cE '^2..$') -eq 0 ]]; then
  echo "$DATA" | head -n -1
  echo
  echo "ERROR: API call unsuccessful"
  echo "Response code: $CODE"
  echo "Raw response data above."
  exit 1
fi

DATA=$( echo "$DATA" | head -n -1 | brc-json.tool )
IDS=$( echo "$DATA" \
        | sed -n 's/bashrc~roles~id.\([0-9]*\)~.*$/\1/p' )

# Just clean up the output a bit
echo ---
for x in $IDS; do
  echo "$DATA" | grep "\.$x~"
  echo ---
done
