#!/bin/bash

#
# List available roles on the given cloud account

function usage() {
  echo "Usage: brc-identity-listroles [-t BRC_TENANTID] [-a BRC_AUTHTOKEN] -u USERID -r ROLEID"
  echo "Example:"
  echo "  # brc-identity-listroles -t 123456 \\"
  echo "  #                        -a 1a2b3c4d5e6f7g8h9i0j \\"
  echo "  #                        -u cf03c840b20a11e3b30b10bf4840bf8d \\"
  echo "  #                        -r 999999"
  echo "Example:"
  echo "  # export BRC_TENANTID=123456"
  echo "  # export BRC_AUTHTOKEN=1a2b3c4d5e6f7g8h9i0j"
  echo "  # brc-identity-listroles -u cf03c840b20a11e3b30b10bf4840bf8d \\"
  echo "  #                        -r 999999"
}

USAGEFLAG=0
while getopts ":hu:r:t:a:" arg; do
  case $arg in
    t) BRC_TENANTID=$OPTARG;;
    a) BRC_AUTHTOKEN=$OPTARG;;
    u) USERID=$OPTARG;;
    r) ROLEID=$OPTARG;;
    :) echo "ERROR: Option -$OPTARG requires an argument."
       USAGEFLAG=1;;
    *) echo "ERROR: Invalid option: -$OPTARG"
       USAGEFLAG=1;;
  esac
done #End arguments
shift $(($OPTIND - 1))

if [ -z $BRC_TENANTID ]; then
  echo "ERROR: Must define BRC_TENANTID in environment or argument"
  USAGEFLAG=1
elif [ -z $BRC_AUTHTOKEN ]; then
  echo "ERROR: Must define BRC_AUTHTOKEN in environment or argument"
  USAGEFLAG=1
elif [ -z $USERID ]; then
  echo "ERROR: Must define USERID in environment or argument"
  USAGEFLAG=1
elif [ -z $ROLEID ]; then
  echo "ERROR: Must define ROLEID in environment or argument"
  USAGEFLAG=1
fi
if [ $USAGEFLAG -ne 0 ]; then
  usage &&exit 1 
fi

DATA=$(curl --write-out \\n%{http_code} --silent --output - \
            $IDENTITY_ENDPOINT/users/$USERID/roles/OS-KSADM/$ROLEID \
            -H "Content-Type: application/json" \
            -H "X-Auth-Token: $BRC_AUTHTOKEN" \
         2>/dev/null )
RETVAL=$?
CODE=$( echo "$DATA" | tail -n 1 )

# Check for failed API call
if [ $RETVAL -ne 0 ]; then
  echo "ERROR: Attempt to reach API (a curl command) failed."
  echo "Note: This relies on IDENTITY_ENDPOINT being defined."
  echo "See the README - this SDK modifies your environment -"
  echo "it shouldn't be run with full paths."
  exit 1
elif [[ $(echo "$CODE" | grep -cE '^2..$') -eq 0 ]]; then
  echo "$DATA" | head -n -1
  echo
  echo "ERROR: API call unsuccessful"
  echo "Response code: $CODE"
  echo "Raw response data above."
  exit 1
fi

DATA=$( echo "$DATA" | head -n -1 | brc-json.tool )
echo "Response code: $CODE"
echo "Done - no response data"
