#!/bin/bash

. $BASHRC_BASE/bashrc/errors.bash

function usage() {
  echo "Usage: brc-monitor-suppress [-h] [-a BRC_AUTHTOKEN] [-t BRC_TENANTID] \\"
  echo "                            [-e EntityID [-e EntityID]] \\"
  echo "                            [-c CheckID [-c CheckID]] \\"
  echo "                            [-A AlarmID [-A AlarmID]] \\"
  echo "                            [-n NotificationID [-n NotificationID]]"
  echo "Example:"
  echo "  # brc-monitor-suppress -a 1a2b3c4d5e6f7g8h9i0j \\"
  echo "                         -t 123456 \\"
  echo "                         -e dbf5f362b8f811e3a3c21fd76cc332fb \\"
  echo "                         -e e6f2c27cb8f811e396388bcf9ed02669 \\"
  echo "                         -S "
  echo "                         -E "
  echo "Arguments:"
  echo "  -a X	Authentication token.  This can be set via the environment"
  echo "        variable BRC_AUTHTOKEN instead of as an argument."
  echo "  -A X  Pair of entity and alarm ID.  Can be specified multiple times."
  echo "        Example: EntityID:AlarmID"
  echo "  -c X  Pair of entity and check ID.  Can be specified multiple times."
  echo "        Example: EntityID:CheckID"
  echo "  -e X  Entity ID.  All monitors on specified entity will be suppressed."
  echo "        Can be specified multiple times."
  echo "  -h	Print this help"
  echo "  -n X  Notification plan ID.  Can be specified multiple times."
  echo "  -t X	Tenant ID (DDI).  This can be set via the environment"
  echo "        variable BRC_TENANTID instead of as an argument."
}

USAGEFLAG=0
while getopts ":ha:t:e:c:A:n:" arg; do
  case $arg in
    a) BRC_AUTHTOKEN=$OPTARG;;
    t) BRC_TENANTID=$OPTARG;;
    e) ENTITIES="$ENTITIES $OPTARG";;
    c) CHECKS="$CHECKS $OPTARG";;
    A) ALARMS="$ALARMS $OPTARG";;
    n) NOTIFICATIONS="$NOTIFICATIONS $OPTARG";;
    h) usage && exit 0;;
    :) echo "ERROR: Option -$OPTARG requires an argument."
       USAGEFLAG=1;;
    *) echo "ERROR: Invalid option: -$OPTARG"
       USAGEFLAG=1;;
  esac
done #End arguments
shift $(($OPTIND - 1))

if [ -z "$BRC_AUTHTOKEN" ]; then
  echo "ERROR: Must define BRC_AUTHTOKEN in environment or argument"
  USAGEFLAG=1
fi
if [ -z "$BRC_TENANTID" ]; then
  echo "ERROR: Must define BRC_TENANTID in environment or argument"
  USAGEFLAG=1
fi

# Ensure something was passed
if [[ -z "$ENTITIES" &&
      -z "$CHECKS" &&
      -z "$ALARMS" &&
      -a "$NOTIFICATIONS" ]]; then
  echo "ERROR: Must specify at least one entity, check, alarm, or notification"
  USAGEFLAG=1
fi

if [ $USAGEFLAG -ne 0 ]; then
  usage && exit 1
fi

#BRC_REGION=$( echo $BRC_REGION | tr 'A-Z' 'a-z' )
#MONITOR_ENDPOINT=$( $BRCUTIL/brc-util-imageendpoint -r $BRC_REGION )

# Add some date logic, so people can say "5 hours" and such
STARTTIME=123456789
ENDTIME=123456789

# Get args into the proper format for JSON
ENTITIES=$( echo "$ENTITIES" | sed -e "s/^ /'/" -e "s/ /\', \'/g" -e "s/\s*$/'/" )
CHECKS=$( echo "$CHECKS" | sed -e "s/^ /'/" -e "s/ /\', \'/g" -e "s/\s*$/'/" )
ALARMS=$( echo "$ALARMS" | sed -e "s/^ /'/" -e "s/ /\', \'/g" -e "s/\s*$/'/" )
NOTIFICATIONS=$( echo $NOTIFICATIONS | sed -e "s/^ /'/" -e "s/ /\', \'/g" -e "s/\s*$/'/" )

DATA=$( curl --write-out \\n%{http_code} --silent --output - \
             $MONITOR_ENDPOINT/$BRC_TENANTID \
             -X POST \
             -H "Content-Type: application/json" \
             -H "X-Auth-Token: $BRC_AUTHTOKEN" \
             -d '{ "notification_plans": ['"$NOTIFICATIONS"'],
                   "entities": ['"$ENTITIES"'],
                   "checks": ['"$CHECKS"'],
                   "alarms": ['"$ALARMS"'],
                   "start_time": '$STARTTIME',
                   "end_time": '$ENDTIME' }' \
          2>/dev/null )
RETVAL=$?
CODE=$( echo "$DATA" | tail -n 1 )

# Check for failed API call
if [ $RETVAL -ne 0 ]; then
  errorcurlfail
elif [[ $(echo "$CODE" | grep -cE '^2..$') -eq 0 ]]; then
  errornot200 $CODE $( echo "$DATA" | head -n -1 )
fi

DATA=$( echo "$DATA" | head -n -1 | $BRCUTIL/brc-util-json.tool )

echo "$DATA"
exit 0
